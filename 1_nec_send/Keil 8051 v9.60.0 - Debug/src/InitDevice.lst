C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/26/2024 15:39:09 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\hegip\D
                    -esktop\Egyetem\6. felev\mikrovez\mikrovez_2_project\1_nec_send\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE)
                    - WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\hegip\Desk
                    -top\Egyetem\6. felev\mikrovez\mikrovez_2_project\1_nec_send\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v
                    -4.3.0//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.3.0//Device/EFM8SB2/inc) PRINT
                    -(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8SB2_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void)
  23          {
  24   1              // $[Config Calls]
  25   1              // Save the SFRPAGE
  26   1              uint8_t SFRPAGE_save = SFRPAGE;
  27   1              PCA_0_enter_DefaultMode_from_RESET();
  28   1              PORTS_2_enter_DefaultMode_from_RESET();
  29   1              PBCFG_0_enter_DefaultMode_from_RESET();
  30   1              TIMER01_0_enter_DefaultMode_from_RESET();
  31   1              TIMER16_2_enter_DefaultMode_from_RESET();
  32   1              TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  33   1              // Restore the SFRPAGE
  34   1              SFRPAGE = SFRPAGE_save;
  35   1              // [Config Calls]$
  36   1      
  37   1      }
  38          
  39          extern void PCA_0_enter_DefaultMode_from_RESET(void)
  40          {
  41   1              // $[PCA0MD - PCA Mode]
  42   1              /***********************************************************************
  43   1               - Disable Watchdog Timer
  44   1               - System clock divided by 12
  45   1               - PCA continues to function normally while the system controller is in
  46   1               Idle Mode
  47   1               - Disable the CF interrupt
  48   1               - Disable Watchdog Timer
  49   1               - Watchdog Timer Enable unlocked
  50   1               ***********************************************************************/
  51   1              SFRPAGE = 0x00;
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/26/2024 15:39:09 PAGE 2   

  52   1              PCA0MD &= ~PCA0MD_WDTE__BMASK;
  53   1              PCA0MD = PCA0MD_CPS__SYSCLK_DIV_12 | PCA0MD_CIDL__NORMAL
  54   1                              | PCA0MD_ECF__OVF_INT_DISABLED | PCA0MD_WDTE__DISABLED
  55   1                              | PCA0MD_WDLCK__UNLOCKED;
  56   1              // [PCA0MD - PCA Mode]$
  57   1      
  58   1              // $[PCA0H - PCA Counter/Timer High Byte]
  59   1              // [PCA0H - PCA Counter/Timer High Byte]$
  60   1      
  61   1              // $[PCA0L - PCA Counter/Timer Low Byte]
  62   1              // [PCA0L - PCA Counter/Timer Low Byte]$
  63   1      
  64   1              // $[PCA0PWM - PCA PWM Configuration]
  65   1              // [PCA0PWM - PCA PWM Configuration]$
  66   1      
  67   1              // $[PCA0CN0 - PCA Control 0]
  68   1              // [PCA0CN0 - PCA Control 0]$
  69   1      
  70   1      }
  71          
  72          extern void PBCFG_0_enter_DefaultMode_from_RESET(void)
  73          {
  74   1              // $[XBR2 - Port I/O Crossbar 2]
  75   1              /***********************************************************************
  76   1               - Weak Pullups enabled 
  77   1               - Crossbar enabled
  78   1               ***********************************************************************/
  79   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
  80   1              // [XBR2 - Port I/O Crossbar 2]$
  81   1      
  82   1              // $[XBR0 - Port I/O Crossbar 0]
  83   1              // [XBR0 - Port I/O Crossbar 0]$
  84   1      
  85   1              // $[XBR1 - Port I/O Crossbar 1]
  86   1              // [XBR1 - Port I/O Crossbar 1]$
  87   1      
  88   1      }
  89          
  90          extern void TIMER16_2_enter_DefaultMode_from_RESET(void)
  91          {
  92   1              // $[Timer Initialization]
  93   1              // Save Timer Configuration
  94   1              uint8_t TMR2CN0_TR2_save;
  95   1              TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
  96   1              // Stop Timer
  97   1              TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
  98   1              // [Timer Initialization]$
  99   1      
 100   1              // $[TMR2CN0 - Timer 2 Control]
 101   1              // [TMR2CN0 - Timer 2 Control]$
 102   1      
 103   1              // $[TMR2H - Timer 2 High Byte]
 104   1              // [TMR2H - Timer 2 High Byte]$
 105   1      
 106   1              // $[TMR2L - Timer 2 Low Byte]
 107   1              // [TMR2L - Timer 2 Low Byte]$
 108   1      
 109   1              // $[TMR2RLH - Timer 2 Reload High Byte]
 110   1              /***********************************************************************
 111   1               - Timer 2 Reload High Byte = 0xFF
 112   1               ***********************************************************************/
 113   1              TMR2RLH = (0xFF << TMR2RLH_TMR2RLH__SHIFT);
 114   1              // [TMR2RLH - Timer 2 Reload High Byte]$
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/26/2024 15:39:09 PAGE 3   

 115   1      
 116   1              // $[TMR2RLL - Timer 2 Reload Low Byte]
 117   1              /***********************************************************************
 118   1               - Timer 2 Reload Low Byte = 0xDF
 119   1               ***********************************************************************/
 120   1              TMR2RLL = (0xDF << TMR2RLL_TMR2RLL__SHIFT);
 121   1              // [TMR2RLL - Timer 2 Reload Low Byte]$
 122   1      
 123   1              // $[TMR2CN0]
 124   1              /***********************************************************************
 125   1               - Start Timer 2 running
 126   1               ***********************************************************************/
 127   1              TMR2CN0 |= TMR2CN0_TR2__RUN;
 128   1              // [TMR2CN0]$
 129   1      
 130   1              // $[Timer Restoration]
 131   1              // Restore Timer Configuration
 132   1              TMR2CN0 |= TMR2CN0_TR2_save;
 133   1              // [Timer Restoration]$
 134   1      
 135   1      }
 136          
 137          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void)
 138          {
 139   1              // $[CKCON0 - Clock Control 0]
 140   1              /***********************************************************************
 141   1               - System clock divided by 12
 142   1               - Counter/Timer 0 uses the clock defined by the prescale field, SCA
 143   1               - Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 144   1               - Timer 2 low byte uses the system clock
 145   1               - Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 146   1               - Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 147   1               - Timer 1 uses the clock defined by the prescale field, SCA
 148   1               ***********************************************************************/
 149   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_12 | CKCON0_T0M__PRESCALE
 150   1                              | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__SYSCLK
 151   1                              | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 152   1                              | CKCON0_T1M__PRESCALE;
 153   1              // [CKCON0 - Clock Control 0]$
 154   1      
 155   1              // $[TMOD - Timer 0/1 Mode]
 156   1              /***********************************************************************
 157   1               - Mode 2, 8-bit Counter/Timer with Auto-Reload
 158   1               - Mode 0, 13-bit Counter/Timer
 159   1               - Timer Mode
 160   1               - Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 161   1               - Timer Mode
 162   1               - Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 163   1               ***********************************************************************/
 164   1              TMOD = TMOD_T0M__MODE2 | TMOD_T1M__MODE0 | TMOD_CT0__TIMER
 165   1                              | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 166   1              // [TMOD - Timer 0/1 Mode]$
 167   1      
 168   1              // $[TCON - Timer 0/1 Control]
 169   1              /***********************************************************************
 170   1               - Start Timer 0 running
 171   1               ***********************************************************************/
 172   1              TCON |= TCON_TR0__RUN;
 173   1              // [TCON - Timer 0/1 Control]$
 174   1      
 175   1      }
 176          
 177          extern void PORTS_2_enter_DefaultMode_from_RESET(void)
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/26/2024 15:39:09 PAGE 4   

 178          {
 179   1              // $[P2 - Port 2 Pin Latch]
 180   1              // [P2 - Port 2 Pin Latch]$
 181   1      
 182   1              // $[P2MDOUT - Port 2 Output Mode]
 183   1              /***********************************************************************
 184   1               - P2.0 output is open-drain
 185   1               - P2.1 output is open-drain
 186   1               - P2.2 output is open-drain
 187   1               - P2.3 output is push-pull
 188   1               - P2.4 output is open-drain
 189   1               - P2.5 output is open-drain
 190   1               - P2.6 output is open-drain
 191   1               - P2.7 output is open-drain
 192   1               ***********************************************************************/
 193   1              P2MDOUT = P2MDOUT_B0__OPEN_DRAIN | P2MDOUT_B1__OPEN_DRAIN
 194   1                              | P2MDOUT_B2__OPEN_DRAIN | P2MDOUT_B3__PUSH_PULL
 195   1                              | P2MDOUT_B4__OPEN_DRAIN | P2MDOUT_B5__OPEN_DRAIN
 196   1                              | P2MDOUT_B6__OPEN_DRAIN | P2MDOUT_B7__OPEN_DRAIN;
 197   1              // [P2MDOUT - Port 2 Output Mode]$
 198   1      
 199   1              // $[P2MDIN - Port 2 Input Mode]
 200   1              // [P2MDIN - Port 2 Input Mode]$
 201   1      
 202   1              // $[P2SKIP - Port 2 Skip]
 203   1              // [P2SKIP - Port 2 Skip]$
 204   1      
 205   1              // $[P2DRV - Port 2 Drive Strength]
 206   1              // [P2DRV - Port 2 Drive Strength]$
 207   1      
 208   1      }
 209          
 210          extern void TIMER01_0_enter_DefaultMode_from_RESET(void)
 211          {
 212   1              // $[Timer Initialization]
 213   1              //Save Timer Configuration
 214   1              uint8_t TCON_save;
 215   1              TCON_save = TCON;
 216   1              //Stop Timers
 217   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 218   1      
 219   1              // [Timer Initialization]$
 220   1      
 221   1              // $[TH0 - Timer 0 High Byte]
 222   1              /***********************************************************************
 223   1               - Timer 0 High Byte = 0x8B
 224   1               ***********************************************************************/
 225   1              TH0 = (0x8B << TH0_TH0__SHIFT);
 226   1              // [TH0 - Timer 0 High Byte]$
 227   1      
 228   1              // $[TL0 - Timer 0 Low Byte]
 229   1              // [TL0 - Timer 0 Low Byte]$
 230   1      
 231   1              // $[TH1 - Timer 1 High Byte]
 232   1              // [TH1 - Timer 1 High Byte]$
 233   1      
 234   1              // $[TL1 - Timer 1 Low Byte]
 235   1              // [TL1 - Timer 1 Low Byte]$
 236   1      
 237   1              // $[Timer Restoration]
 238   1              //Restore Timer Configuration
 239   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 240   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/26/2024 15:39:09 PAGE 5   

 241   1              // [Timer Restoration]$
 242   1      
 243   1      }
 244          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     90    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
