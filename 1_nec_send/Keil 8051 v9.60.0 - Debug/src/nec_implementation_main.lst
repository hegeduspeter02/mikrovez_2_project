C51 COMPILER V9.60.0.0   NEC_IMPLEMENTATION_MAIN                                           04/17/2024 13:34:19 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE NEC_IMPLEMENTATION_MAIN
OBJECT MODULE PLACED IN .\src\nec_implementation_main.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\hallgat
                    -o\Desktop\HegedusP\nec_implementation\src\nec_implementation_main.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVE
                    -L(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\hallgato\Desktop\Heged
                    -usP\nec_implementation\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.5//Device/shared/si8051Base;C:/Si
                    -liconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.5//Device/EFM8SB2/inc) PRINT(.\src\nec_implementation_main.lst) C
                    -OND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\nec_implementation_main.OBJ)

line level    source

   1          //=========================================================
   2          // src/nec_implementation_main.c: generated by Hardware Configurator
   3          //
   4          // This file will be updated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!!
   7          //=========================================================
   8          
   9          //-----------------------------------------------------------------------------
  10          // Includes
  11          //-----------------------------------------------------------------------------
  12          #include <SI_EFM8SB2_Register_Enums.h>                  // SFR declarations
  13          #include "InitDevice.h"
  14          // $[Generated Includes]
  15          // [Generated Includes]$
  16          
  17          SI_SBIT(signal_out, P2, 3U);
  18          #define NINE_MS_OF_COUNT 342
  19          #define IMPULSE_NEEDED 21
  20          #define START_BURST_COUNT 16
  21          #define START_NOTHING_COUNT 8
  22          #define FOUR_AND_HALF_MS_OF_COUNT 171
  23          #define ONE 1
  24          #define ZERO 0
  25          #define HIGH 1
  26          #define LOW 0
  27          #define BITS_IN_BYTE 8
  28          
  29          uint8_t counter = IMPULSE_NEEDED;
  30          uint8_t data_out[4];
  31          const uint8_t DATA_OUT_LENGTH = 4;
  32          
  33          //-----------------------------------------------------------------------------
  34          // SiLabs_Startup() Routine
  35          // ----------------------------------------------------------------------------
  36          // This function is called immediately after reset, before the initialization
  37          // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
  38          // useful place to disable the watchdog timer, which is enable by default
  39          // and may trigger before main() in some instances.
  40          //-----------------------------------------------------------------------------
  41          void SiLabs_Startup (void)
  42          {
  43   1        // $[SiLabs Startup]
  44   1        // [SiLabs Startup]$
  45   1      }
  46          
  47          void FillDataArray(uint8_t address, uint8_t command)
  48          {
  49   1              data_out[0] = address;
  50   1              data_out[1] = ~address;
  51   1              data_out[2] = command;
C51 COMPILER V9.60.0.0   NEC_IMPLEMENTATION_MAIN                                           04/17/2024 13:34:19 PAGE 2   

  52   1              data_out[3] = ~command;
  53   1      }
  54          
  55          void SendLogicOneSignal()
  56          {
  57   1              counter = IMPULSE_NEEDED;
  58   1              while(counter != 0)
  59   1              {
  60   2                      if(TMR2CN0_TF2H)
  61   2                      {
  62   3                              TMR2CN0_TF2H = 0x00;
  63   3                              signal_out = ONE;
  64   3                              signal_out = ZERO;
  65   3                              counter--;
  66   3                      }
  67   2              }
  68   1      }
  69          
  70          
  71          void SendPulse(uint8_t p_counter)
  72          {
  73   1              signal_out = HIGH;
  74   1              counter = p_counter;
  75   1      
  76   1              while(counter != 0)
  77   1              {
  78   2                      if(TCON_TF0)
  79   2                      {
  80   3                              TCON_TF0 = 0x00;
  81   3                              counter--;
  82   3                      }
  83   2                      if(TMR2CN0_TF2H)
  84   2                      {
  85   3                              TMR2CN0_TF2H = 0x00;
  86   3                              signal_out = !signal_out;
  87   3                      }
  88   2              }
  89   1      }
  90          
  91          void SendNothing(uint8_t p_counter)
  92          {
  93   1              signal_out = LOW;
  94   1      
  95   1              counter = p_counter;
  96   1              while(counter != 0)
  97   1              {
  98   2                      if(TCON_TF0)
  99   2                      {
 100   3                              TCON_TF0 = 0x00;
 101   3                              counter--;
 102   3                      }
 103   2              }
 104   1      }
 105          
 106          void SendStartSignal()
 107          {
 108   1              SendPulse(START_BURST_COUNT);
 109   1      
 110   1              SendNothing(START_NOTHING_COUNT);
 111   1      }
 112          
 113          void SendLogicOne()
 114          {
C51 COMPILER V9.60.0.0   NEC_IMPLEMENTATION_MAIN                                           04/17/2024 13:34:19 PAGE 3   

 115   1              SendPulse(1);
 116   1      
 117   1              SendNothing(3);
 118   1      }
 119          
 120          void SendLogicZero()
 121          {
 122   1              SendPulse(1);
 123   1      
 124   1              SendNothing(1);
 125   1      }
 126          
 127          uint8_t index = 0;
 128          uint8_t n = 0;
 129          bit data_bit = 0;
 130          void SendSignalOut()
 131          {
 132   1              for(index = 0; index < DATA_OUT_LENGTH; index++)
 133   1              {
 134   2                      for(n = BITS_IN_BYTE; n > 0; n--)
 135   2                      {
 136   3                              data_bit = (data_out[index] >> n) & 1U;
 137   3                              if(data_bit == 0)
 138   3                              {
 139   4                                      SendLogicZero();
 140   4                              }
 141   3                              else
 142   3                              {
 143   4                                      SendLogicOne();
 144   4                              }
 145   3                      }
 146   2              }
 147   1      }
 148          
 149          //-----------------------------------------------------------------------------
 150          // main() Routine
 151          // ----------------------------------------------------------------------------
 152          int main (void)
 153          {
 154   1        // Call hardware initialization routine
 155   1        enter_DefaultMode_from_RESET();
 156   1      
 157   1        while (1) 
 158   1        {
 159   2          // $[Generated Run-time code]
 160   2          // [Generated Run-time code]$
 161   2                FillDataArray(0, 181);
 162   2                SendStartSignal();
 163   2                SendSignalOut();
 164   2        }                             
 165   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    189    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   NEC_IMPLEMENTATION_MAIN                                           04/17/2024 13:34:19 PAGE 4   

   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
