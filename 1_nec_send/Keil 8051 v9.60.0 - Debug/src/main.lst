C51 COMPILER V9.60.0.0   MAIN                                                              04/26/2024 15:39:09 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\src\main.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\hegip\D
                    -esktop\Egyetem\6. felev\mikrovez\mikrovez_2_project\1_nec_send\src\main.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNI
                    -NGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\hegip\Desktop\Eg
                    -yetem\6. felev\mikrovez\mikrovez_2_project\1_nec_send\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.3.0/
                    -/Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.3.0//Device/EFM8SB2/inc) PRINT(.\src
                    -\main.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\main.OBJ)

line level    source

   1          //=========================================================
   2          // src/nec_implementation_main.c: generated by Hardware Configurator
   3          //
   4          // This file will be updated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!!
   7          //=========================================================
   8          
   9          //-----------------------------------------------------------------------------
  10          // Includes
  11          //-----------------------------------------------------------------------------
  12          #include <SI_EFM8SB2_Register_Enums.h>                  // SFR declarations
  13          #include "InitDevice.h"
  14          // $[Generated Includes]
  15          // [Generated Includes]$
  16          
  17          SI_SBIT(signal_out, P2, 3U);
  18          #define NINE_MS_OF_COUNT 342
  19          #define IMPULSE_NEEDED 21
  20          #define START_BURST_COUNT 16
  21          #define START_NOTHING_COUNT 8
  22          #define FOUR_AND_HALF_MS_OF_COUNT 171
  23          #define ONE 1
  24          #define ZERO 0
  25          #define HIGH 1
  26          #define LOW 0
  27          #define BITS_IN_BYTE 8
  28          #define ADDRESS_OUT 0
  29          #define COMMAND_OUT 0
  30          
  31          uint8_t counter = IMPULSE_NEEDED;
  32          uint8_t data_out[4];
  33          const uint8_t DATA_OUT_LENGTH = 4;
  34          
  35          //-----------------------------------------------------------------------------
  36          // SiLabs_Startup() Routine
  37          // ----------------------------------------------------------------------------
  38          // This function is called immediately after reset, before the initialization
  39          // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
  40          // useful place to disable the watchdog timer, which is enable by default
  41          // and may trigger before main() in some instances.
  42          //-----------------------------------------------------------------------------
  43          void SiLabs_Startup (void)
  44          {
  45   1        // $[SiLabs Startup]
  46   1        // [SiLabs Startup]$
  47   1      }
  48          
  49          void FillDataArray(uint8_t address, uint8_t command)
  50          {
  51   1              data_out[0] = address;
C51 COMPILER V9.60.0.0   MAIN                                                              04/26/2024 15:39:09 PAGE 2   

  52   1              data_out[1] = ~address;
  53   1              data_out[2] = command;
  54   1              data_out[3] = ~command;
  55   1      }
  56          
  57          void SendLogicOneSignal()
  58          {
  59   1              counter = IMPULSE_NEEDED;
  60   1              while(counter != 0)
  61   1              {
  62   2                      if(TMR2CN0_TF2H)
  63   2                      {
  64   3                              TMR2CN0_TF2H = 0x00;
  65   3                              signal_out = ONE;
  66   3                              signal_out = ZERO;
  67   3                              counter--;
  68   3                      }
  69   2              }
  70   1      }
  71          
  72          
  73          void SendPulse(uint8_t p_counter)
  74          {
  75   1              signal_out = HIGH;
  76   1              counter = p_counter;
  77   1      
  78   1              while(counter != 0)
  79   1              {
  80   2                      if(TCON_TF0)
  81   2                      {
  82   3                              TCON_TF0 = 0x00;
  83   3                              counter--;
  84   3                      }
  85   2                      if(TMR2CN0_TF2H)
  86   2                      {
  87   3                              TMR2CN0_TF2H = 0x00;
  88   3                              signal_out = !signal_out;
  89   3                      }
  90   2              }
  91   1      }
  92          
  93          void SendNothing(uint8_t p_counter)
  94          {
  95   1              signal_out = LOW;
  96   1      
  97   1              counter = p_counter;
  98   1              while(counter != 0)
  99   1              {
 100   2                      if(TCON_TF0)
 101   2                      {
 102   3                              TCON_TF0 = 0x00;
 103   3                              counter--;
 104   3                      }
 105   2              }
 106   1      }
 107          
 108          void SendStartSignal()
 109          {
 110   1              SendPulse(START_BURST_COUNT);
 111   1      
 112   1              SendNothing(START_NOTHING_COUNT);
 113   1      }
 114          
C51 COMPILER V9.60.0.0   MAIN                                                              04/26/2024 15:39:09 PAGE 3   

 115          void SendLogicOne()
 116          {
 117   1              SendPulse(1);
 118   1      
 119   1              SendNothing(3);
 120   1      }
 121          
 122          void SendLogicZero()
 123          {
 124   1              SendPulse(1);
 125   1      
 126   1              SendNothing(1);
 127   1      }
 128          
 129          uint8_t index = 0;
 130          uint8_t n = 0;
 131          bit data_bit = 0;
 132          void SendSignalOut()
 133          {
 134   1              for(index = 0; index < DATA_OUT_LENGTH; index++)
 135   1              {
 136   2                      for(n = BITS_IN_BYTE; n > 0; n--)
 137   2                      {
 138   3                              data_bit = (data_out[index] >> n) & 1U;
 139   3                              if(data_bit == 0)
 140   3                              {
 141   4                                      SendLogicZero();
 142   4                              }
 143   3                              else
 144   3                              {
 145   4                                      SendLogicOne();
 146   4                              }
 147   3                      }
 148   2              }
 149   1      
 150   1              SendPulse(1);
 151   1      }
 152          
 153          //-----------------------------------------------------------------------------
 154          // main() Routine
 155          // ----------------------------------------------------------------------------
 156          int main (void)
 157          {
 158   1        // Call hardware initialization routine
 159   1        enter_DefaultMode_from_RESET();
 160   1      
 161   1        while (1) 
 162   1        {
 163   2          // $[Generated Run-time code]
 164   2          // [Generated Run-time code]$
 165   2      
 166   2                FillDataArray(ADDRESS_OUT, COMMAND_OUT);
 167   2                SendStartSignal();
 168   2                SendSignalOut();
 169   2        }                             
 170   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    192    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   MAIN                                                              04/26/2024 15:39:09 PAGE 4   

   DATA SIZE        =      8    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
